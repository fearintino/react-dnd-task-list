{"version":3,"sources":["modules/reducers/tasks.js","modules/action.js","utils/idsArrayHelper.js","modules/reducers/workflows.js","modules/reducers/index.js","components/Task.js","components/Workflow.js","App.js","modules/store.js","index.js"],"names":["defaultState","id","content","ACTION_TYPES","TASK_MOVED_IN_WORKFLOW","TASK_MOVED_BETWEEN_WORKFLOWS","makeNewIdsArray","sourceIds","sourceIndex","destinationIndex","newId","result","Array","from","splice","moveIdBetweenArrays","destinationIds","initialResult","destinationResult","title","taskIds","done","combineReducers","tasks","state","type","workflows","payload","source","destination","draggableId","start","droppableId","index","finish","Container","styled","div","props","isDragging","Task","task","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","Workflow","workflow","useSelector","map","taskId","isDraggingOver","key","placeholder","initialState","App","onDragEnd","handleDragEnd","this","Object","values","Component","connect","dispatch","reduxStore","createStore","reducer","applyMiddleware","ReduxThunk","logger","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.8c28dd3a.chunk.js","sourcesContent":["// @flow\nimport type { Action } from '../action';\n\nexport type Task = {\n  id: string,\n  content: string,\n};\n\ntype TasksState = {\n  [string]: Task\n};\n\nconst defaultState = {\n  'task-1': { id: 'task-1', content: 'TEST 1' },\n  'task-2': { id: 'task-2', content: 'TEST 2' },\n  'task-3': { id: 'task-3', content: 'TEST 3' },\n  'task-4': { id: 'task-4', content: 'TEST 4' },\n  'task-5': { id: 'task-5', content: 'TEST 5' },\n};\n\nexport default (state: TasksState = defaultState, { type }: Action): TasksState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    default:\n      return state;\n  }\n};\n","// @flow\nexport const ACTION_TYPES = {\n  TASK_MOVED_IN_WORKFLOW: 'TASK_MOVED_IN_WORKFLOW',\n  TASK_MOVED_BETWEEN_WORKFLOWS: 'TASK_MOVED_BETWEEN_WORKFLOWS',\n};\n\n// eslint-disable-next-line no-undef\nexport type ActionType = $Keys<typeof ACTION_TYPES>;\n\nexport type Action = {\n  type: ActionType,\n  payload: Object,\n};\n\nexport type handleDragEndArgs = {\n  source: any,\n  destination: any,\n  draggableId: any,\n};\n\nexport function handleDragEnd({ source, destination, draggableId }: handleDragEndArgs) {\n  return (dispatch: Function) => {\n    if (source.droppableId === destination.droppableId) {\n      return dispatch({\n        type: ACTION_TYPES.TASK_MOVED_IN_WORKFLOW,\n        payload: {\n          source,\n          destination,\n          draggableId,\n        },\n      });\n    }\n\n\n    return dispatch({\n      type: ACTION_TYPES.TASK_MOVED_BETWEEN_WORKFLOWS,\n      payload: {\n        source,\n        destination,\n        draggableId,\n      },\n    });\n  };\n}\n","// @flow\n\nexport const makeNewIdsArray = (\n  sourceIds: Array<string>,\n  sourceIndex: number,\n  destinationIndex: number,\n  newId: string,\n): Array<string> => {\n  const result = Array.from(sourceIds);\n  result.splice(sourceIndex, 1);\n  result.splice(destinationIndex, 0, newId);\n\n  return result;\n};\n\ntype MoveIdBetweenArraysResult = {\n  initialResult: Array<string>,\n  destinationResult: Array<string>,\n};\n\nexport const moveIdBetweenArrays = (\n  sourceIds: Array<string>,\n  sourceIndex: number,\n  destinationIds: Array<string>,\n  destinationIndex: number,\n  id: string,\n): MoveIdBetweenArraysResult => {\n  const initialResult = Array.from(sourceIds);\n  initialResult.splice(sourceIndex, 1);\n\n  const destinationResult = Array.from(destinationIds);\n  destinationResult.splice(destinationIndex, 0, id);\n\n  return { initialResult, destinationResult };\n};\n","// @flow\nimport { ACTION_TYPES } from '../action';\nimport type { Action } from '../action';\nimport { makeNewIdsArray, moveIdBetweenArrays } from '../../utils/idsArrayHelper';\n\nexport type Workflow = {\n  id: string,\n  title: string,\n  taskIds: Array<string>\n};\n\ntype WorkflowState = {\n  [string]: Workflow\n};\n\nconst defaultState: WorkflowState = {\n  'to-do': {\n    id: 'to-do',\n    title: 'To Do',\n    taskIds: ['task-1', 'task-2'],\n  },\n  'in-progress': {\n    id: 'in-progress',\n    title: 'In Progress',\n    taskIds: ['task-3', 'task-4'],\n  },\n  done: {\n    id: 'done',\n    title: 'Done',\n    taskIds: ['task-5'],\n  },\n};\n\nexport default (state: WorkflowState = defaultState, { type, payload }: Action): WorkflowState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    case ACTION_TYPES.TASK_MOVED_IN_WORKFLOW: {\n      const { source, destination, draggableId } = payload;\n      const start = state[source.droppableId];\n\n      return {\n        ...state,\n        [start.id]: {\n          ...start,\n          taskIds: makeNewIdsArray(start.taskIds, source.index, destination.index, draggableId),\n        },\n      };\n    }\n    case ACTION_TYPES.TASK_MOVED_BETWEEN_WORKFLOWS: {\n      const { source, destination, draggableId } = payload;\n      const start = state[source.droppableId];\n      const finish = state[destination.droppableId];\n      const { initialResult, destinationResult } = moveIdBetweenArrays(\n        start.taskIds,\n        source.index,\n        finish.taskIds,\n        destination.index,\n        draggableId,\n      );\n\n      return {\n        ...state,\n        [start.id]: {\n          ...start,\n          taskIds: initialResult,\n        },\n        [finish.id]: {\n          ...finish,\n          taskIds: destinationResult,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n","// @flow\nimport { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport workflows from './workflows';\n\nexport default combineReducers({\n  tasks,\n  workflows,\n});\n","// @flow\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport type { Task as TaskType } from '../modules/reducers/tasks';\n\nconst Container = styled.div`\n  background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n  padding: 8px;\n  margin-bottom: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n`;\n\ntype TaskProps = { +task: TaskType, +index: number };\n\nconst Task = ({ task, index }: TaskProps) => (\n  <Draggable draggableId={task.id} index={index}>\n    {(provided, snapshot) => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        isDragging={snapshot.isDragging}\n      >\n        {task.content}\n      </Container>\n    )}\n  </Draggable>\n);\n\nexport default Task;\n","// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport Task from './Task';\nimport type { Workflow as WorkflowType } from '../modules/reducers/workflows';\n\nconst Container = styled.div`\n  padding: 15px;\n  margin: 20px;\n  border-radius: 5px;\n  background-color: #DCDFE2;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  font-weight: bold;\n  font-size: 15px;\n  color: black;\n  padding-bottom: 15px;\n`;\n\nconst TaskList = styled.div`\n  transition: background-color 0.2s ease;\n  min-height: 100px;\n  flex-grow: 1;\n  min-width: 300px;\n`;\n\ntype WorkflowComponentProps = { +workflow: WorkflowType };\n\nconst Workflow = ({ workflow: { id, title, taskIds } }: WorkflowComponentProps) => {\n  const tasks = useSelector(state => taskIds.map(taskId => state.tasks[taskId]));\n\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Droppable droppableId={id}>\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {tasks.map((task, index) => <Task key={task.id} index={index} task={task} />)}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n    </Container>\n  );\n};\n\nexport default Workflow;\n","// @flow\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nimport Workflow from './components/Workflow';\nimport { handleDragEnd as handleDragEndAction } from './modules/action';\nimport type { Workflow as WorkflowType } from './modules/reducers/workflows';\n\nconst Container = styled.div`\n  justify-content: center;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\ntype AppProps = {\n  +handleDragEnd: Function,\n  +workflows: { [string]: WorkflowType },\n}\n\nclass App extends Component<AppProps> {\n  onDragEnd = (result) => {\n    const { destination, source } = result;\n\n    if (\n      !destination\n      || (destination.droppableId === source.droppableId && destination.index === source.index)\n    ) {\n      return;\n    }\n\n    const { handleDragEnd } = this.props;\n\n    handleDragEnd(result);\n  };\n\n  render() {\n    const { workflows } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Container>\n          {(Object.values(workflows): any).map((workflow: WorkflowType) => (\n            <Workflow key={workflow.id} workflow={workflow} />\n          ))}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ workflows: state.workflows });\n\nexport default connect(mapStateToProps, { handleDragEnd: handleDragEndAction })(App);\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\n\nimport reducer from './reducers';\n\nexport default function configureStore(initialState) {\n  const store = createStore(reducer, initialState, applyMiddleware(ReduxThunk, logger));\n\n  if (module.hot) {\n    module.hot.accept(\n      // eslint-disable-next-line global-require\n      './reducers', () => store.replaceReducer(require('./reducers').default),\n    );\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'css-reset/reset.css';\nimport configureStore from './modules/store';\n\nimport App from './App';\n\nconst reduxStore = configureStore();\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={reduxStore}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    render();\n  });\n}\n"],"sourceRoot":""}