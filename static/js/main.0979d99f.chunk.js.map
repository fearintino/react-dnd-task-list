{"version":3,"sources":["modules/reducers/tasks.js","modules/action.js","modules/reducers/workflows.js","modules/reducers/index.js","components/Task.js","components/Workflow.js","App.js","modules/store.js","index.js"],"names":["defaultState","id","content","Types","DRAG_ENDED","title","taskIds","done","combineReducers","tasks","state","type","workflows","payload","source","destination","draggableId","start","droppableId","finish","newIdsArray","Array","from","splice","index","startTaskIds","newStart","finishTaskIds","newFinish","Container","styled","div","props","isDragging","Task","task","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","Workflow","workflow","useSelector","map","taskId","isDraggingOver","key","placeholder","initialState","App","onDragEnd","result","handleDragEnd","this","Object","values","Component","connect","dispatch","reduxStore","createStore","reducer","applyMiddleware","ReduxThunk","logger","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0979d99f.chunk.js","sourcesContent":["// @flow\nimport type { Action } from '../action';\n\nexport type Task = {\n  id: string,\n  content: string,\n};\n\ntype TasksState = {\n  [string]: Task\n};\n\nconst defaultState = {\n  'task-1': { id: 'task-1', content: 'TEST 1' },\n  'task-2': { id: 'task-2', content: 'TEST 2' },\n  'task-3': { id: 'task-3', content: 'TEST 3' },\n  'task-4': { id: 'task-4', content: 'TEST 4' },\n  'task-5': { id: 'task-5', content: 'TEST 5' },\n};\n\nexport default (state: TasksState = defaultState, { type }: Action): TasksState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    default:\n      return state;\n  }\n};\n","// @flow\nexport const Types = {\n  DRAG_ENDED: 'DRAG_ENDED',\n};\n\nexport type Action = {\n  type: string,\n  payload: Object,\n};\n\nexport type handleDragEndArgs = {\n  source: any,\n  destination: any,\n  draggableId: any,\n};\n\nexport function handleDragEnd({ source, destination, draggableId }: handleDragEndArgs) {\n  return (dispatch: Function) => dispatch({\n    type: Types.DRAG_ENDED,\n    payload: {\n      source,\n      destination,\n      draggableId,\n    },\n  });\n}\n","// @flow\nimport { Types } from '../action';\nimport type { Action } from '../action';\n\nexport type Workflow = {\n  id: string,\n  title: string,\n  taskIds: Array<string>\n};\n\ntype WorkflowState = {\n  [string]: Workflow\n};\n\nconst defaultState: WorkflowState = {\n  'to-do': {\n    id: 'to-do',\n    title: 'To Do',\n    taskIds: ['task-1', 'task-2'],\n  },\n  'in-progress': {\n    id: 'in-progress',\n    title: 'In Progress',\n    taskIds: ['task-3', 'task-4'],\n  },\n  done: {\n    id: 'done',\n    title: 'Done',\n    taskIds: ['task-5'],\n  },\n};\n\nexport default (state: WorkflowState = defaultState, { type, payload }: Action): WorkflowState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    case Types.DRAG_ENDED: {\n      const { source, destination, draggableId } = payload;\n      const start = state[source.droppableId];\n      const finish = state[destination.droppableId];\n\n      if (start.id === finish.id) {\n        const newIdsArray = Array.from(start.taskIds);\n        newIdsArray.splice(source.index, 1);\n        newIdsArray.splice(destination.index, 0, draggableId);\n\n        return {\n          ...state,\n          [start.id]: {\n            ...start,\n            taskIds: newIdsArray,\n          },\n        };\n      }\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n\n      const newStart = {\n        ...start,\n        taskIds: startTaskIds,\n      };\n\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      const newFinish = {\n        ...finish,\n        taskIds: finishTaskIds,\n      };\n\n      return {\n        ...state,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","// @flow\nimport { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport workflows from './workflows';\n\nexport default combineReducers({\n  tasks,\n  workflows,\n});\n","// @flow\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport type { Task as TaskType } from '../modules/reducers/tasks';\n\nconst Container = styled.div`\n  background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n  padding: 8px;\n  margin-bottom: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n`;\n\ntype TaskProps = { +task: TaskType, +index: number };\n\nconst Task = ({ task, index }: TaskProps) => (\n  <Draggable draggableId={task.id} index={index}>\n    {(provided, snapshot) => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        isDragging={snapshot.isDragging}\n      >\n        {task.content}\n      </Container>\n    )}\n  </Draggable>\n);\n\nexport default Task;\n","// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport Task from './Task';\nimport type { Workflow as WorkflowType } from '../modules/reducers/workflows';\n\nconst Container = styled.div`\n  padding: 15px;\n  margin: 20px;\n  border-radius: 5px;\n  background-color: #DCDFE2;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  font-weight: bold;\n  font-size: 15px;\n  color: black;\n  padding-bottom: 15px;\n`;\n\nconst TaskList = styled.div`\n  transition: background-color 0.2s ease;\n  min-height: 100px;\n  flex-grow: 1;\n  min-width: 300px;\n`;\n\ntype WorkflowComponentProps = { +workflow: WorkflowType };\n\nconst Workflow = ({ workflow: { id, title, taskIds } }: WorkflowComponentProps) => {\n  const tasks = useSelector(state => taskIds.map(taskId => state.tasks[taskId]));\n\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Droppable droppableId={id}>\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {tasks.map((task, index) => <Task key={task.id} index={index} task={task} />)}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n    </Container>\n  );\n};\n\nexport default Workflow;\n","// @flow\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nimport Workflow from './components/Workflow';\nimport { handleDragEnd as handleDragEndAction } from './modules/action';\nimport type { Workflow as WorkflowType } from './modules/reducers/workflows';\n\nconst Container = styled.div`\n  justify-content: center;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\ntype AppProps = {\n  +handleDragEnd: Function,\n  +workflows: { [string]: WorkflowType },\n}\n\nclass App extends Component<AppProps> {\n  onDragEnd = (result) => {\n    const { destination, source } = result;\n\n    if (\n      !destination\n      || (destination.droppableId === source.droppableId && destination.index === source.index)\n    ) {\n      return;\n    }\n\n    const { handleDragEnd } = this.props;\n\n    handleDragEnd(result);\n  };\n\n  render() {\n    const { workflows } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Container>\n          {(Object.values(workflows): any).map((workflow: WorkflowType) => (\n            <Workflow key={workflow.id} workflow={workflow} />\n          ))}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ workflows: state.workflows });\n\nexport default connect(mapStateToProps, { handleDragEnd: handleDragEndAction })(App);\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\n\nimport reducer from './reducers';\n\nexport default function configureStore(initialState) {\n  const store = createStore(reducer, initialState, applyMiddleware(ReduxThunk, logger));\n\n  if (module.hot) {\n    module.hot.accept(\n      // eslint-disable-next-line global-require\n      './reducers', () => store.replaceReducer(require('./reducers').default),\n    );\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'css-reset/reset.css';\nimport configureStore from './modules/store';\n\nimport App from './App';\n\nconst reduxStore = configureStore();\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={reduxStore}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    render();\n  });\n}\n"],"sourceRoot":""}