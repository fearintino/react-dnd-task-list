{"version":3,"sources":["modules/action.js","modules/reducers/tasks.js","utils/idsArrayHelper.js","modules/reducers/workflows.js","modules/reducers/index.js","components/Task.js","dictionary.js","components/Workflow.js","App.js","modules/store.js","index.js"],"names":["ACTION_TYPES","TASK_MOVED_IN_WORKFLOW","TASK_MOVED_BETWEEN_WORKFLOWS","NEW_TASK_ADDED","defaultState","id","content","makeNewIdsArray","sourceIds","sourceIndex","destinationIndex","newId","result","Array","from","splice","moveIdBetweenArrays","destinationIds","initialResult","destinationResult","title","taskIds","sort","done","combineReducers","tasks","state","type","payload","task","workflows","workflowId","workflow","source","destination","draggableId","start","droppableId","index","finish","Container","styled","div","props","isDragging","Task","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","NewTaskActivator","ItemInput","input","Workflow","useSelector","map","taskId","dispatch","useDispatch","useState","addingNewTask","setState","handleNewItemActivatorClick","newAddingState","isDraggingOver","key","placeholder","onKeyDown","e","target","value","Math","random","toString","substring","onClick","dictionary","initialState","App","onDragEnd","handleDragEnd","this","Component","connect","Object","values","a","b","reduxStore","createStore","reducer","applyMiddleware","ReduxThunk","logger","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.b26441c0.chunk.js","sourcesContent":["// @flow\nexport const ACTION_TYPES = {\n  TASK_MOVED_IN_WORKFLOW: 'TASK_MOVED_IN_WORKFLOW',\n  TASK_MOVED_BETWEEN_WORKFLOWS: 'TASK_MOVED_BETWEEN_WORKFLOWS',\n  NEW_TASK_ADDED: 'NEW_TASK_ADDED',\n};\n\n// eslint-disable-next-line no-undef\nexport type ActionType = $Keys<typeof ACTION_TYPES>;\n\nexport type Action = {\n  type: ActionType,\n  payload: Object,\n};\n\nexport type handleDragEndArg = {\n  source: any,\n  destination: any,\n  draggableId: any,\n};\n\nexport function handleDragEnd({ source, destination, draggableId }: handleDragEndArg) {\n  return (dispatch: Function) => {\n    if (source.droppableId === destination.droppableId) {\n      return dispatch({\n        type: ACTION_TYPES.TASK_MOVED_IN_WORKFLOW,\n        payload: {\n          source,\n          destination,\n          draggableId,\n        },\n      });\n    }\n\n\n    return dispatch({\n      type: ACTION_TYPES.TASK_MOVED_BETWEEN_WORKFLOWS,\n      payload: {\n        source,\n        destination,\n        draggableId,\n      },\n    });\n  };\n}\n\nexport function handleNewTask(content: string, workflowId: string) {\n  return (dispatch: Function) => dispatch({\n    type: ACTION_TYPES.NEW_TASK_ADDED,\n    payload: {\n      task: {\n        id: Math.random().toString(36).substring(7),\n        content,\n      },\n      workflowId,\n    },\n  });\n}\n","// @flow\nimport type { Action } from '../action';\nimport { ACTION_TYPES } from '../action';\n\nexport type Task = {\n  id: string,\n  content: string,\n};\n\ntype TasksState = {\n  [string]: Task\n};\n\nconst defaultState = {\n  'task-1': { id: 'task-1', content: 'TEST 1' },\n  'task-2': { id: 'task-2', content: 'TEST 2' },\n  'task-3': { id: 'task-3', content: 'TEST 3' },\n  'task-4': { id: 'task-4', content: 'TEST 4' },\n  'task-5': { id: 'task-5', content: 'TEST 5' },\n};\n\nexport default (state: TasksState = defaultState, { type, payload }: Action): TasksState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    case ACTION_TYPES.NEW_TASK_ADDED: {\n      const { task } = payload;\n\n      return {\n        ...state,\n        [task.id]: task,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","// @flow\n\nexport const makeNewIdsArray = (\n  sourceIds: Array<string>,\n  sourceIndex: number,\n  destinationIndex: number,\n  newId: string,\n): Array<string> => {\n  const result = Array.from(sourceIds);\n  result.splice(sourceIndex, 1);\n  result.splice(destinationIndex, 0, newId);\n\n  return result;\n};\n\ntype MoveIdBetweenArraysResult = {\n  initialResult: Array<string>,\n  destinationResult: Array<string>,\n};\n\nexport const moveIdBetweenArrays = (\n  sourceIds: Array<string>,\n  sourceIndex: number,\n  destinationIds: Array<string>,\n  destinationIndex: number,\n  id: string,\n): MoveIdBetweenArraysResult => {\n  const initialResult = Array.from(sourceIds);\n  initialResult.splice(sourceIndex, 1);\n\n  const destinationResult = Array.from(destinationIds);\n  destinationResult.splice(destinationIndex, 0, id);\n\n  return { initialResult, destinationResult };\n};\n","// @flow\nimport { ACTION_TYPES } from '../action';\nimport type { Action } from '../action';\nimport { makeNewIdsArray, moveIdBetweenArrays } from '../../utils/idsArrayHelper';\n\nexport type Workflow = {\n  id: string,\n  title: string,\n  sort: number,\n  taskIds: Array<string>,\n};\n\ntype WorkflowState = {\n  [string]: Workflow\n};\n\nconst defaultState: WorkflowState = {\n  'to-do': {\n    id: 'to-do',\n    title: 'To Do',\n    taskIds: ['task-1', 'task-2'],\n    sort: 0,\n  },\n  'in-progress': {\n    id: 'in-progress',\n    title: 'In Progress',\n    taskIds: ['task-3', 'task-4'],\n    sort: 1,\n  },\n  done: {\n    id: 'done',\n    title: 'Done',\n    taskIds: ['task-5'],\n    sort: 2,\n  },\n};\n\nexport default (state: WorkflowState = defaultState, { type, payload }: Action): WorkflowState => {\n  if (typeof state === 'undefined') {\n    return defaultState;\n  }\n\n  switch (type) {\n    case ACTION_TYPES.NEW_TASK_ADDED: {\n      const { task, workflowId } = payload;\n      const workflow = state[workflowId];\n\n      return {\n        ...state,\n        [workflowId]: {\n          ...workflow,\n          taskIds: [...workflow.taskIds, task.id],\n        },\n      };\n    }\n    case ACTION_TYPES.TASK_MOVED_IN_WORKFLOW: {\n      const { source, destination, draggableId } = payload;\n      const start = state[source.droppableId];\n\n      return {\n        ...state,\n        [start.id]: {\n          ...start,\n          taskIds: makeNewIdsArray(start.taskIds, source.index, destination.index, draggableId),\n        },\n      };\n    }\n    case ACTION_TYPES.TASK_MOVED_BETWEEN_WORKFLOWS: {\n      const { source, destination, draggableId } = payload;\n      const start = state[source.droppableId];\n      const finish = state[destination.droppableId];\n      const { initialResult, destinationResult } = moveIdBetweenArrays(\n        start.taskIds,\n        source.index,\n        finish.taskIds,\n        destination.index,\n        draggableId,\n      );\n\n      return {\n        ...state,\n        [start.id]: {\n          ...start,\n          taskIds: initialResult,\n        },\n        [finish.id]: {\n          ...finish,\n          taskIds: destinationResult,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n","// @flow\nimport { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport workflows from './workflows';\n\nexport default combineReducers({\n  tasks,\n  workflows,\n});\n","// @flow\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport type { Task as TaskType } from '../modules/reducers/tasks';\n\nconst Container = styled.div`\n  background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n  padding: 8px;\n  margin-bottom: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 5px;\n`;\n\ntype TaskProps = { +task: TaskType, +index: number };\n\nconst Task = ({ task, index }: TaskProps) => (\n  <Draggable draggableId={task.id} index={index}>\n    {(provided, snapshot) => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        isDragging={snapshot.isDragging}\n      >\n        {task.content}\n      </Container>\n    )}\n  </Draggable>\n);\n\nexport default Task;\n","export default {\n  addNewTask: '+ Добавить новую задачу',\n  cancel: 'Отмена',\n};\n","// @flow\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport Task from './Task';\nimport type { Workflow as WorkflowType } from '../modules/reducers/workflows';\nimport { handleNewTask } from '../modules/action';\nimport dictionary from '../dictionary';\n\nconst Container = styled.div`\n  padding: 15px;\n  margin: 20px;\n  border-radius: 5px;\n  background-color: #DCDFE2;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  font-weight: bold;\n  font-size: 15px;\n  color: black;\n  padding-bottom: 15px;\n`;\n\nconst TaskList = styled.div`\n  transition: background-color 0.2s ease;\n  min-height: 100px;\n  flex-grow: 1;\n  min-width: 300px;\n`;\n\nconst NewTaskActivator = styled.div`\n  cursor: pointer;\n`;\n\nconst ItemInput = styled.input`\n  height: 20px;\n  margin-bottom: 10px;\n`;\n\ntype WorkflowComponentProps = { +workflow: WorkflowType };\n\nconst Workflow = ({ workflow: { id, title, taskIds } }: WorkflowComponentProps) => {\n  const tasks = useSelector(state => taskIds.map(taskId => state.tasks[taskId]));\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    addingNewTask: false,\n  });\n\n  function handleNewItemActivatorClick() {\n    const newAddingState = !state.addingNewTask;\n\n    setState({ addingNewTask: newAddingState });\n  }\n\n  function handleNewItemSubmit(e) {\n    if (e.key === 'Enter' && e.target.value) {\n      handleNewItemActivatorClick();\n      handleNewTask(e.target.value, id)(dispatch);\n    }\n  }\n\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Droppable droppableId={id}>\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {tasks.map((task, index) => <Task key={task.id} index={index} task={task} />)}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n\n      {state.addingNewTask && (\n        <ItemInput onKeyDown={handleNewItemSubmit} />\n      )}\n\n      <NewTaskActivator onClick={handleNewItemActivatorClick}>\n        {!state.addingNewTask ? dictionary.addNewTask : dictionary.cancel}\n      </NewTaskActivator>\n    </Container>\n  );\n};\n\nexport default Workflow;\n","// @flow\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nimport Workflow from './components/Workflow';\nimport { handleDragEnd as handleDragEndAction } from './modules/action';\nimport type { Workflow as WorkflowType } from './modules/reducers/workflows';\n\nconst Container = styled.div`\n  justify-content: center;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\ntype AppProps = {\n  +handleDragEnd: Function,\n  +workflows: Array<WorkflowType>,\n}\n\nclass App extends Component<AppProps> {\n  onDragEnd = (result) => {\n    const { destination, source } = result;\n\n    if (\n      !destination\n      || (destination.droppableId === source.droppableId && destination.index === source.index)\n    ) {\n      return;\n    }\n\n    const { handleDragEnd } = this.props;\n\n    handleDragEnd(result);\n  };\n\n  render() {\n    const { workflows } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Container>\n          {workflows.map(workflow => <Workflow key={workflow.id} workflow={workflow} />)}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  workflows: (Object.values(state.workflows): any).sort((a, b) => a.sort - b.sort),\n});\n\nexport default connect(mapStateToProps, { handleDragEnd: handleDragEndAction })(App);\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\n\nimport reducer from './reducers';\n\nexport default function configureStore(initialState) {\n  const store = createStore(reducer, initialState, applyMiddleware(ReduxThunk, logger));\n\n  if (module.hot) {\n    module.hot.accept(\n      // eslint-disable-next-line global-require\n      './reducers', () => store.replaceReducer(require('./reducers').default),\n    );\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'css-reset/reset.css';\nimport configureStore from './modules/store';\n\nimport App from './App';\n\nconst reduxStore = configureStore();\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={reduxStore}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    render();\n  });\n}\n"],"sourceRoot":""}